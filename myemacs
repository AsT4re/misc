;; warning buffer is shown when 'emergency' lvl types minimum occured
;; by default it is warning. comment this line for putting back
;(setq warning-minimum-level :emergency)

(setq load-path (cons "~/.emacs.d/others" load-path))

;; Use melpa for emacs > 24
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  )

;; Configs if version is Xemacs on windows
(if (and (boundp 'window-system) window-system)
    (when (string-match "XEmacs" emacs-version)
      (if (not (and (boundp 'mule-x-win-initted) mule-x-win-initted))
          (require 'sym-lock))
      (require 'font-lock)))

;; force c++-mode for .h files
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

;; xliff are xml files
(setq auto-mode-alist (cons '("\\.\\(xliff\\|xlf\\)$" . xml-mode) auto-mode-alist))

;; Add command
(defun my-move-to-next-whitespace-char ()
  "Move to the last non-whitespace character in the current line."
  (interactive)
  (re-search-forward "[ \t]"))

;; Prevent Emacs from making backup files
(setq make-backup-files nil)

;; Alt + Arrows -> Change buffer
(global-set-key (kbd "M-<left>") 'windmove-left)
(global-set-key (kbd "M-<right>") 'windmove-right)
(global-set-key (kbd "M-<up>") 'windmove-up)
(global-set-key (kbd "M-<down>") 'windmove-down)

;; (global-set-key [f4] 'previous-error)
;; (global-set-key [f3] 'next-error)
;; (global-set-key [f2] 'recompile)
;; (global-set-key [f5] 'compile)

;; Kill word forward
(global-set-key [(control delete)]
                'kill-word)

;; Use the mouse
(xterm-mouse-mode 1)

;; Wheel Mouse Scrolling
(mouse-wheel-mode t)

;; Set scrolling 1 line by 1, the default configuration is confusin\
(setq scroll-step 1)


;; Shift commands
(defun shift-text (distance)
  (if (use-region-p)
      (let ((mark (mark)))
        (save-excursion
          (indent-rigidly (region-beginning)
                          (region-end)
                          distance)
          (push-mark mark t t)
          (setq deactivate-mark nil)))
    (indent-rigidly (line-beginning-position)
                    (line-end-position)
                    distance)))

(defun shift-right (count)
  (interactive "p")
  (shift-text count))

(defun shift-left (count)
  (interactive "p")
  (shift-text (- count)))


(auto-fill-mode 1)
(setq inhibit-startup-message t)                    ; don't show the
                                                    ; GNU splash
                                                    ; screen
(setq frame-title-format "%b")                      ; titlebar shows buffer's name
(global-font-lock-mode t)                              ; syntax highlighting
(setq font-lock-maximum-decoration t)        ; max decoration for all modes
(setq transient-mark-mode 't)                       ; highlight selection
(setq line-number-mode 't)                            ; line number
(setq column-number-mode 't)                      ; column number
(setq-default show-trailing-whitespace t)      ; show trailing whitespace
;;(setq-default indent-tabs-mode nil)

;; Enable this for a minimal window appearence
; (when (display-graphic-p)
;   (progn
;     (scroll-bar-mode 0)                                  ; no scroll bar
;     (menu-bar-mode 0)                                  ; no menu bar
;     (tool-bar-mode 0)                                     ; no tool bar
;     (mouse-wheel-mode t)))                             ; enable mouse wheel

(fringe-mode 0)   				       ; disable the fringe

(setq normal-erase-is-backspace-mode t)       ; make delete work as it should

(fset 'yes-or-no-p 'y-or-n-p)                 ; 'y or n' instead of 'yes or no'
(show-paren-mode t)                           ; match parenthesis

;(global-set-key [delete] 'kill-word)
;(global-set-key [delete] 'delete-char)

(setq ido-ignore-buffer (quote ("\\`\\*breakpoint of.*\\*\\`"
  "\\`\\*stack frames of.*\\`\\" "\\`\\*gud\\*\\'"
  "\\`\\*locals of.*\\*\\'"  "\\` ")))

; (setq-default gdb-many-windows t)


(setq-default indicate-buffer-boundaries (quote left))
(setq sh-indentation 2)
(setq sh-indent-for-then 0)
(setq csh-indent 2)
(setq sh-basic-offset 2)
(setq standard-indent 2)
(setq perl-indent-level 2)


;; SYSTRAN Coding style
(setq-default indent-tabs-mode nil)       ; space indentation
(setq-default c-basic-offset 2)
(setq-default tab-width 2)

(c-set-offset 'substatement-open 0)       ; The brace that opens a substatement block.
(c-set-offset 'inline-open 0)             ; Brace that opens an in-class inline method.
(c-set-offset 'case-label '+)             ; A "case" or "default" label.
(c-set-offset 'arglist-intro '+)          ; Indent for beginning arglist opening
(c-set-offset 'arglist-close 0)           ; No indent for arglist closing

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ido
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Smex
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(autoload 'smex "smex-3.0"
  "Smex is a M-x enhancement for Emacs, it provides a convenient interface to
your recently and most frequently used commands.")
(global-set-key (kbd "M-x") 'smex)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JS2 mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "/home/lefebvre/.emacs.d/others/js2/")
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Jade mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (add-to-list 'load-path "/home/lefebvre/.emacs.d/others/jade-mode")
;; (require 'sws-mode)
;; (require 'jade-mode)
;; (add-to-list 'auto-mode-alist '("\\.styl$" . sws-mode))
;; (add-to-list 'auto-mode-alist '("\\.jade$" . jade-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Highlight-symbol
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'highlight-symbol)
(global-set-key (kbd "C-1") 'highlight-symbol-at-point)
(global-set-key (kbd "C-2") 'highlight-symbol-next)
(global-set-key (kbd "C-3") 'highlight-symbol-prev)
(global-set-key (kbd "C-4") 'highlight-symbol-query-replace)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Suffix Uniquify
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Xmllint
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun xmllint ()
  "Prettify xml buffer"
  (interactive())
  (xmllint-region (point-min) (point-max))
  (message "Buffer has been xmllint-ed."))

(defun xmllint-region (pmin pmax)
  "Prettify xml region"
  (interactive())
  (save-excursion
    (shell-command-on-region pmin pmax
                             "xmllint --format --recover -"
                             (current-buffer) 'replace
                             (get-buffer-create "*Xmllint Errors*")
                             'display-error-buffer)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jsonlint
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun jsonlint ()
  "Prettify json buffer"
  (interactive())
  (jsonlint-region (point-min) (point-max))
  (message "Buffer has been jsonlint-ed."))


(defun jsonlint-region (pmin pmax)
  "Prettify json region"
  (interactive())
  (save-excursion
    (shell-command-on-region pmin pmax
                             "python -m json.tool"
                             (current-buffer) 'replace
                             (get-buffer-create "*python errors*")
                             'display-error-buffer)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; web-beautify
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (add-to-list 'load-path "/home/lefebvre/.emacs.d/others/web-beautify/")

;; (require 'web-beautify) ;; Not necessary if using ELPA package
;; (eval-after-load 'js2-mode
;;   '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
;; ;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
;; (eval-after-load 'js
;;   '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

;; (eval-after-load 'json-mode
;;   '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

;; (eval-after-load 'sgml-mode
;;   '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

;; (eval-after-load 'css-mode
;;   '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Auto-complete
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'auto-complete)
(global-auto-complete-mode t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Magit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'magit)
(require 'magit-svn)

(defun my-magit-backport-edit ()
  "Edit `COMMIT_EDITMSG' buffer to add backport mark from a cherry-pick"
  (interactive)
  (end-of-buffer)
  (search-backward "git-svn-id: ")
  (search-forward-regexp "@\\([0-9]+\\)")
  (let ((rev (match-string 1))
        (current-branch (magit-get-current-branch)))
    (when (string= current-branch "master")
      (setq current-branch "trunk"))
    (beginning-of-buffer)
    (search-forward-regexp "#[0-9]+" nil t)
    (unless (char-equal (char-after) ?#)
        (insert "#"))
    (search-forward-regexp ":" nil t)
    (insert (format " backport on %s: r%s:" current-branch rev)))
  (end-of-buffer)
  (search-backward-regexp "^git-svn-id: .*$")
  (kill-line 2)
  (beginning-of-buffer)
  (save-buffer))

(define-key git-commit-mode-map (kbd "C-c C-b") 'my-magit-backport-edit)

(defun my-magit-backport-item-edit-commit-message ()
  ;;TODO customize here
  ;;(message "ok!"))
  (my-magit-backport-edit))
  ;;(with-editor-finish nil)) ;; TODO maybe use argment "force" instead of removing hook

(defun my-magit-backport-item-edit-commit-message-one-time ()
  (remove-hook 'git-commit-setup-hook 'my-magit-backport-item-edit-commit-message-one-time)
  (remove-hook 'with-editor-finish-query-functions 'git-commit-finish-query-functions t)
  (my-magit-backport-item-edit-commit-message))

(defun my-magit-cherry-apply-sync (commit &optional args)
  "Copy of magit-cherry-apply, but synchronous."
  (interactive (magit-cherry-pick-read-args "Apply commit"))
  (magit-assert-one-parent commit "cherry-pick")
  (magit-git "cherry-pick" "--no-commit" (remove "--ff" args) commit) ;; raise errors
  (magit-refresh))

(defun my-magit-backport-item ()
  "Like magit-cherry-pick-item, but with message containing backport infos"
  (interactive)
  (call-interactively 'my-magit-cherry-apply-sync)
  (add-hook 'git-commit-setup-hook 'my-magit-backport-item-edit-commit-message-one-time)
  ;; stage all
  (magit-git "add" "-u" ".") ;; raise errors
  (magit-refresh)
  (magit-commit))

(define-key magit-log-mode-map (kbd "C") 'my-magit-backport-item)

(global-set-key (kbd "C-x g") 'magit-status)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; DO NOT DIRECTLY EDIT THESE VARIABLES
;;; These are changes reflected via customization menus
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu 0.8)
 '(column-number-mode t)
 '(highlight-symbol-colors
   (quote
    ("yellow" "DeepPink" "cyan" "MediumPurple1" "SpringGreen1" "DarkOrange" "HotPink1" "RoyalBlue1" "OliveDrab" "MediumOrchid1" "pale turquoise" "tomato")))
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Ubuntu Mono" :foundry "unknown" :slant normal :weight normal :height 98 :width normal))))
 '(blank-line ((t nil))))
(put 'downcase-region 'disabled nil)
